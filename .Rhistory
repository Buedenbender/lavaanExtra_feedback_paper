speed = paste0("x", 7:9)))
model.latent <- write_lavaan(mediation, regression, covariance, latent = latent)
cat(model.latent)
library(lavaan)
fit.latent <- lavaan(model.latent, data = HolzingerSwineford1939, auto.var = TRUE,
auto.fix.first = TRUE, auto.cov.lv.x = TRUE)
summary(fit.latent, fit.measures = TRUE)
compare_performance(fit.saturated, fit.path, fit.latent)
data <- compare_performance(fit.saturated, fit.path, fit.latent)
table <- data[c("Name", "NFI", "CFI", "RMSEA", "SRMR", "Chi2", "Chi2_df", "p_Chi2", "AIC", "BIC")]
table
flextable::add_footer_row(data, values = c(Name = "Ideal Value",
NFI = ">= .95",
CFI = ">= .95",
RMSEA = "< .06-.08",
SRMR = "<= .08",
Chi2 = "(Chi2 / Chi2_df",
Chi2_df = "< 2 or 3)",
p_Chi2 = "> .05",
AIC = "The smaller the better",
BIC = "The smaller the better"),
colwidths = rep(1, length(.$col_keys)))
table <- nice_table(table)
table
flextable::add_footer_row(data, values = c(Name = "Ideal Value",
NFI = ">= .95",
CFI = ">= .95",
RMSEA = "< .06-.08",
SRMR = "<= .08",
Chi2 = "(Chi2 / Chi2_df",
Chi2_df = "< 2 or 3)",
p_Chi2 = "> .05",
AIC = "The smaller the better",
BIC = "The smaller the better"),
colwidths = rep(1, length(.$col_keys)))
flextable::add_footer_row(table, values = c(Name = "Ideal Value",
NFI = ">= .95",
CFI = ">= .95",
RMSEA = "< .06-.08",
SRMR = "<= .08",
Chi2 = "(Chi2 / Chi2_df",
Chi2_df = "< 2 or 3)",
p_Chi2 = "> .05",
AIC = "The smaller the better",
BIC = "The smaller the better"),
colwidths = rep(1, length(.$col_keys)))
flextable::add_footer_row(table, values = c(Name = "Ideal Value",
NFI = ">= .95",
CFI = ">= .95",
RMSEA = "< .06-.08",
SRMR = "<= .08",
Chi2 = "(Chi2 / Chi2_df",
Chi2_df = "< 2 or 3)",
p_Chi2 = "> .05",
AIC = "The smaller the better",
BIC = "The smaller the better"),
colwidths = rep(1, length(table$col_keys)))
data
nice_fit(fit.saturated, fit.path, fit.latent)
nice_fit(c(fit.saturated, fit.path, fit.latent))
nice_fit(list(fit.saturated, fit.path, fit.latent))
?compare_performance
list.df
list.df <- list(fit.saturated, fit.path, fit.latent)
lapply(list.df, nice_fit)
x <- lapply(list.df, nice_fit)
rbind(x)
do.call(x, rbind)
do.call(rbind, x)
do.call(rbind, x)
df <- do.call(rbind, x)
df
?sys.call
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
compare_fit(list(fit.saturated, fit.path, fit.latent))
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
compare_fit(list(fit.saturated, fit.path, fit.latent))
compare_fit(fit.saturated, fit.path, fit.latent)
match.call(list.fit)
match.call(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
sys.call()
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
compare_fit(fit.saturated, fit.path, fit.latent)
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
devtools::load_all(".")
# Default output
compare_fit(fit.saturated, fit.path, fit.latent)
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
# Default output
compare_fit(fit.saturated, fit.path, fit.latent)
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# Default output
compare_fit(fit.saturated, fit.path, fit.latent)
devtools::load_all(".")
# Default output
compare_fit(fit.saturated, fit.path, fit.latent)
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
library(lavaanExtra)
devtools::load_all(".")
# Define our regression terms
(regression <- list(mpg = names(mtcars)[-1],
disp = names(mtcars)[-c(1:3)]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Fit the model with `lavaan`
library(lavaan)
fit <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
# Get regression parameters only
lavaan_reg(fit)
# We can get it prettier with `rempsyc::nice_table`
library(rempsyc)
nice_table(lavaan_reg(fit), highlight = TRUE)
# Calculate scale averages
data <- HolzingerSwineford1939
data$visual <- rowMeans(data[paste0("x", 1:3)])
data$textual <- rowMeans(data[paste0("x", 4:6)])
data$speed <- rowMeans(data[paste0("x", 7:9)])
# Check what we have
head(data)
# Define our variables
(m <- "visual")
(IV <- c("ageyr", "grade"))
(DV <- c("speed", "textual"))
# Define our lavaan lists
(mediation <- list(speed = m,
textual = m,
visual = IV))
(regression <- list(speed = IV,
textual = IV))
(covariance <- list(speed = "textual",
ageyr = "grade"))
# Write the model, and check it
fit.saturated <- write_lavaan(mediation, regression, covariance)
cat(fit.saturated)
# Fit the model with `lavaan`
fit.saturated <- lavaan(fit.saturated, data = data, auto.var = TRUE)
# Get regression parameters only and make it pretty with `rempsyc::nice_table`
lavaan_reg(fit.saturated) |>
nice_table(highlight = TRUE)
(regression <- list(speed = "grade",
textual = IV))
# We check that we have removed "ageyr" correctly from "speed". OK.
# We can run the model again.
model.path <- write_lavaan(mediation, regression, covariance)
cat(model.path)
# We check that we have removed "ageyr" correctly from "speed" in the
# regression section. OK.
# Fit the model with `lavaan`
fit.path <- lavaan(model.path, data = data, auto.var = TRUE)
# We can get the fit summary if necessary, but the output is a bit long
summary(fit.path)
# Get regression parameters only and make it pretty with `rempsyc::nice_table`
lavaan_reg(fit.path) |>
nice_table(highlight = TRUE)
# Get fit indices
nice_fit(fit)
# We can get it prettier with `rempsyc::nice_table`
nice_table(nice_fit(fit))
(latent <- list(visual = paste0("x", 1:3),
textual = paste0("x", 4:6),
speed = paste0("x", 7:9)))
model.latent <- write_lavaan(mediation, regression, covariance, latent = latent)
cat(model.latent)
library(lavaan)
fit.latent <- lavaan(model.latent, data = HolzingerSwineford1939, auto.var = TRUE,
auto.fix.first = TRUE, auto.cov.lv.x = TRUE)
summary(fit.latent, fit.measures = TRUE)
# Default output
compare_fit(fit.saturated, fit.path, fit.latent)
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# Default output
compare_fit(fit.saturated, fit.path, fit.latent)
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# Default output
compare_fit(fit.saturated, fit.path, fit.latent)
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# Default output
compare_fit(fit.saturated, fit.path, fit.latent)
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
library(lavaanExtra)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
library(lavaanExtra)
devtools::load_all(".")
# We can get it prettier with `rempsyc::nice_table`
nice_table(nice_fit(fit))
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
?compare_performance
#' compare_fit(fit)
compare_fit(fit)
compare_fit(fit, nice_table = TRUE)
?compare_fit
devtools::load_all(".")
?compare_fit
# Define our regression terms
(regression <- list(mpg = names(mtcars)[-1],
disp = names(mtcars)[-c(1:3)]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Fit the model with `lavaan`
library(lavaan)
fit <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
# Get regression parameters only
lavaan_reg(fit)
# We can get it prettier with `rempsyc::nice_table`
library(rempsyc)
nice_table(lavaan_reg(fit), highlight = TRUE)
# Calculate scale averages
data <- HolzingerSwineford1939
data$visual <- rowMeans(data[paste0("x", 1:3)])
data$textual <- rowMeans(data[paste0("x", 4:6)])
data$speed <- rowMeans(data[paste0("x", 7:9)])
# Check what we have
head(data)
# Define our variables
(m <- "visual")
(IV <- c("ageyr", "grade"))
#(DV <- c("speed", "textual"))
# Define our lavaan lists
(mediation <- list(speed = m,
textual = m,
visual = IV))
(regression <- list(speed = IV,
textual = IV))
(covariance <- list(speed = "textual",
ageyr = "grade"))
# Write the model, and check it
fit.saturated <- write_lavaan(mediation, regression, covariance)
cat(fit.saturated)
# Fit the model with `lavaan`
fit.saturated <- lavaan(fit.saturated, data = data, auto.var = TRUE)
# Get regression parameters only and make it pretty with `rempsyc::nice_table`
lavaan_reg(fit.saturated) |>
nice_table(highlight = TRUE)
(regression <- list(speed = "grade",
textual = IV))
# We check that we have removed "ageyr" correctly from "speed". OK.
# We can run the model again.
model.path <- write_lavaan(mediation, regression, covariance)
cat(model.path)
# We check that we have removed "ageyr" correctly from "speed" in the
# regression section. OK.
(regression <- list(speed = "grade",
textual = IV))
# We check that we have removed "ageyr" correctly from "speed". OK.
# We can run the model again. However, for the path
model.path <- write_lavaan(mediation, regression, covariance, label = TRUE)
cat(model.path)
# We check that we have removed "ageyr" correctly from "speed" in the
# regression section. OK.
(indirect <- list(a = c("speed_a", "visual_a"),
b = c("textual_a", "visual_b")))
# We run the model again, with the indirect effects
model.path <- write_lavaan(mediation, regression, covariance, indirect, label = TRUE)
cat(model.path)
indirect
(indirect <- list(age_visual_speed = c("speed_a", "visual_a"),
grade_visual_textual = c("textual_a", "visual_b")))
# We run the model again, with the indirect effects
model.path <- write_lavaan(mediation, regression, covariance, indirect, label = TRUE)
cat(model.path)
# We run the model again, with the indirect effects
model.path <- write_lavaan(mediation, regression, covariance, indirect, label = TRUE)
cat(model.path)
# We run the model again, with the indirect effects
model.path <- write_lavaan(mediation, regression, covariance, indirect, label = FALSE)
cat(model.path)
# We run the model again, with the indirect effects
model.path <- write_lavaan(mediation, regression, covariance, indirect, label = TRUE)
cat(model.path)
# Fit the model with `lavaan`
fit.path <- lavaan(model.path, data = data, auto.var = TRUE)
# We can get the fit summary if necessary, but the output is a bit long
summary(fit.path)
# Get regression parameters only and make it pretty with `rempsyc::nice_table`
lavaan_reg(fit.path) |>
nice_table(highlight = TRUE)
# Get fit indices
nice_fit(fit)
# We can get it prettier with `rempsyc::nice_table`
nice_table(nice_fit(fit))
?inspect
inspect(fit.path, "parameters")
# Let's get the indirect effects only
parameterEstimates(fit)
# Get fit indices
nice_fit(fit.path)
# We can get it prettier with `rempsyc::nice_table`
nice_table(nice_fit(fit.path))
# Let's get the indirect effects only
parameterEstimates(fit.path)
# Let's get the indirect effects only
parameterEstimates(fit.path)[which(parameterEstimates(fit.path)$op == ":=")]
# Let's get the indirect effects only
parameterEstimates(fit.path)[which(parameterEstimates(fit.path) == ":="),]
# Let's get the indirect effects only
parameterEstimates(fit.path)[which(parameterEstimates(fit.path)$op == ":="),]
# Let's get the indirect effects only
parameterEstimates(fit.path, standardized = TRUE)[which(parameterEstimates(fit.path)$op == ":="),]
model.latent <- write_lavaan(mediation, regression, covariance, indirect, latent, label = TRUE)
(latent <- list(visual = paste0("x", 1:3),
textual = paste0("x", 4:6),
speed = paste0("x", 7:9)))
model.latent <- write_lavaan(mediation, regression, covariance, indirect, latent, label = TRUE)
cat(model.latent)
(latent <- list(visual = paste0("x", 1:3),
textual = paste0("x", 4:6),
speed = paste0("x", 7:9)))
model.latent <- write_lavaan(mediation, regression, covariance, indirect, latent, label = TRUE)
cat(model.latent)
library(lavaan)
fit.latent <- lavaan(model.latent, data = HolzingerSwineford1939, auto.var = TRUE,
auto.fix.first = TRUE, auto.cov.lv.x = TRUE)
summary(fit.latent, fit.measures = TRUE)
# Default output
compare_fit(fit.saturated, fit.path, fit.latent)
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# Define our regression terms
(regression <- list(mpg = names(mtcars)[-1],
disp = names(mtcars)[-c(1:3)]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Fit the model with `lavaan`
library(lavaan)
fit <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
# Get regression parameters only
lavaan_reg(fit)
# We can get it prettier with `rempsyc::nice_table`
library(rempsyc)
nice_table(lavaan_reg(fit), highlight = TRUE)
<img src="man/figures/README-reg-1.png" width="30%" />
Here is a structural equation model example. We start with a path analysis first.
### Saturated model
The first step is usually to look at the saturated `lavaan` model.
# Calculate scale averages
data <- HolzingerSwineford1939
data$visual <- rowMeans(data[paste0("x", 1:3)])
data$textual <- rowMeans(data[paste0("x", 4:6)])
data$speed <- rowMeans(data[paste0("x", 7:9)])
# Check what we have
head(data)
# Define our variables
(m <- "visual")
(IV <- c("ageyr", "grade"))
#(DV <- c("speed", "textual"))
# Define our lavaan lists
(mediation <- list(speed = m,
textual = m,
visual = IV))
(regression <- list(speed = IV,
textual = IV))
(covariance <- list(speed = "textual",
ageyr = "grade"))
# Write the model, and check it
fit.saturated <- write_lavaan(mediation, regression, covariance)
cat(fit.saturated)
# Fit the model with `lavaan`
fit.saturated <- lavaan(fit.saturated, data = data, auto.var = TRUE)
# Get regression parameters only and make it pretty with `rempsyc::nice_table`
lavaan_reg(fit.saturated) |>
nice_table(highlight = TRUE)
<img src="man/figures/README-saturated-1.png" width="30%" />
# We can run the model again. However, we set `label = TRUE` to get the path names
model.path <- write_lavaan(mediation, regression, covariance, label = TRUE)
cat(model.path)
# We check that we have removed "ageyr" correctly from "speed" in the
# regression section. OK.
Here, if we check the mediation section of the model, we see that it has been "augmented" with the path names. Those are `speed_a`, `textual_a`, `visual_a`, and `visual_b`. The logic for the determination of the path names is predictable: it is always the dependent variable (on the left) followed by letters, which represent the number of the explanatory variable (on the right).
(indirect <- list(age_visual_speed = c("speed_a", "visual_a"),
grade_visual_textual = c("textual_a", "visual_b")))
# We run the model again, with the indirect effects
model.path <- write_lavaan(mediation, regression, covariance, indirect, label = TRUE)
cat(model.path)
# Fit the model with `lavaan`
fit.path <- lavaan(model.path, data = data, auto.var = TRUE)
# We can get the fit summary if necessary, but the output is a bit long
summary(fit.path)
# Get regression parameters only and make it pretty with `rempsyc::nice_table`
lavaan_reg(fit.path) |>
nice_table(highlight = TRUE)
<img src="man/figures/README-path-1.png" width="30%" />
# Get fit indices
nice_fit(fit.path)
# We can get it prettier with `rempsyc::nice_table`
nice_table(nice_fit(fit.path))
# Let's get the indirect effects only
parameterEstimates(fit.path, standardized = TRUE)[which(parameterEstimates(fit.path)$op == ":="),]
<img src="man/figures/README-path2-1.png" width="50%" />
<!-- ![](models-drawings/model.png) -->
### Latent model
Finally, perhaps we change our mind and decide to run a full SEM instead, with latent variables. Fear not: we don't have to redo everything again. We can simply define our latent variables and proceed.
(latent <- list(visual = paste0("x", 1:3),
textual = paste0("x", 4:6),
speed = paste0("x", 7:9)))
model.latent <- write_lavaan(mediation, regression, covariance, indirect, latent, label = TRUE)
cat(model.latent)
library(lavaan)
fit.latent <- lavaan(model.latent, data = HolzingerSwineford1939, auto.var = TRUE,
auto.fix.first = TRUE, auto.cov.lv.x = TRUE)
summary(fit.latent, fit.measures = TRUE)
### Compare performance of all models
Finally, we can compare our fits by a wrapper around `nice_fit` that also gives optional reference values.
# Default output
compare_fit(fit.saturated, fit.path, fit.latent)
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
devtools::load_all(".")
# With `nice_table = TRUE`
compare_fit(fit.saturated, fit.path, fit.latent, nice_table = TRUE)
