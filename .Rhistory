lavaan_reg(fit.path) |>
nice_table(highlight = TRUE)
# Get fit indices
nice_fit(fit.saturated, fit.path)
# We can get it prettier with `rempsyc::nice_table`
nice_fit(fit.saturated, fit.path, nice_table = TRUE)
data.frame(chi2.df = 2) |> nice_table()
x <- lapply(list(fit.saturated, fit.path), nice_fit_internal)
devtools::load_all(".")
x <- lapply(list(fit.saturated, fit.path), nice_fit_internal)
x
df <- do.call(rbind, x)
df
Model <- sapply(match.call(expand.dots = FALSE)$`...`, as.character)
Model
df <- cbind(Model, df)
cbind(c("fit.saturated", "fit.path"), df)
cbind(Model = c("fit.saturated", "fit.path"), df)
df <- cbind(Model = c("fit.saturated", "fit.path"), df)
df
row.names(df) <- NULL
df
table <- nice_table(df)
table
flextable::add_footer_row(table, values = c(Model = "Ideal Value",
chi2.df = "< 2 or 3)",
p = "> .05",
CFI = "\u2265 .95",
TLI = "\u2265 .95",
RMSEA = "< .06-.08",
SRMR = "\u2264 .08",
AIC = "Smaller is better",
BIC = "Smaller is better")
flextable::add_footer_row(table, values = c(Model = "Ideal Value",
chi2.df = "< 2 or 3)",
p = "> .05",
CFI = "\u2265 .95",
TLI = "\u2265 .95",
RMSEA = "< .06-.08",
SRMR = "\u2264 .08",
AIC = "Smaller is better",
BIC = "Smaller is better"),
colwidths = rep(1, length(table$col_keys)))
flextable::add_footer_row(table, values = c(Model = "Ideal Value",
chi2 = NA,
df = NA,
chi2.df = "< 2 or 3)",
p = "> .05",
CFI = "\u2265 .95",
TLI = "\u2265 .95",
RMSEA = "< .06-.08",
SRMR = "\u2264 .08",
AIC = "Smaller is better",
BIC = "Smaller is better"),
colwidths = rep(1, length(table$col_keys)))
devtools::load_all(".")
# We can get it prettier with `rempsyc::nice_table`
nice_fit(fit.saturated, fit.path, nice_table = TRUE)
devtools::load_all(".")
nice_fit(fit.saturated, fit.path, nice_table = TRUE)
devtools::load_all(".")
nice_fit(fit.saturated, fit.path, nice_table = TRUE)
devtools::load_all(".")
nice_fit(fit.saturated, fit.path, nice_table = TRUE)
devtools::load_all(".")
nice_fit(fit.saturated, fit.path, nice_table = TRUE)
devtools::load_all(".")
# Define our regression terms
(regression <- list(mpg = names(mtcars)[-1],
disp = names(mtcars)[-c(1:3)]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Fit the model with `lavaan`
library(lavaan)
fit <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
# Get regression parameters only
lavaan_reg(fit)
devtools::load_all(".")
# Get regression parameters only
lavaan_reg(fit)
# Get regression parameters only
lavaan_reg(fit, nice_table = TRUE)
# Get regression parameters only
lavaan_reg(fit, nice_table = TRUE)
# Get regression parameters only
lavaan_reg(fit, nice_table = TRUE, highlight = TRUE)
library(lavaanExtra)
library(lavaanExtra)
library(lavaanExtra)
# Define our regression terms
(regression <- list(mpg = names(mtcars)[2:5],
disp = names(mtcars)[4:9]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Fit the model with `lavaan`
library(lavaan)
fit <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
# Get regression parameters only
lavaan_reg(fit)
# Define our regression terms
(regression <- list(mpg = names(mtcars)[2:5],
disp = names(mtcars)[4:8]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Define our regression terms
(regression <- list(mpg = names(mtcars)[2:5],
disp = names(mtcars)[4:7]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Fit the model with `lavaan`
library(lavaan)
fit <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
# Get regression parameters only
lavaan_reg(fit)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_reg(fit, nice_table = TRUE, highlight = TRUE)
?lavaan::parameterEstimates
lavaan::parameterEstimates(fit, standardized = TRUE)
# Define our regression terms
(regression <- list(mpg = names(mtcars)[2:5],
disp = names(mtcars)[4:7]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Fit the model with `lavaan`
library(lavaan)
fit <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
lavaan::parameterEstimates(fit, standardized = TRUE)
x
lavaan::parameterEstimates(fit, standardized = TRUE)
(regression <- list(speed = "grade",
textual = IV))
# We can run the model again. However, we set `label = TRUE` to get the path names
model.path <- write_lavaan(mediation, regression, covariance, label = TRUE)
## Regression example
# Define our regression terms
(regression <- list(mpg = names(mtcars)[2:5],
disp = names(mtcars)[4:7]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Fit the model with `lavaan`
library(lavaan)
fit <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
# Get regression parameters only
lavaan_reg(fit)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_reg(fit, nice_table = TRUE, highlight = TRUE)
# Calculate scale averages
data <- HolzingerSwineford1939
data$visual <- rowMeans(data[paste0("x", 1:3)])
data$textual <- rowMeans(data[paste0("x", 4:6)])
data$speed <- rowMeans(data[paste0("x", 7:9)])
# Check what we have
head(data)
# Define our variables
(m <- "visual")
(IV <- c("ageyr", "grade"))
#(DV <- c("speed", "textual"))
# Define our lavaan lists
(mediation <- list(speed = m,
textual = m,
visual = IV))
(regression <- list(speed = IV,
textual = IV))
(covariance <- list(speed = "textual",
ageyr = "grade"))
# Write the model, and check it
fit.saturated <- write_lavaan(mediation, regression, covariance)
cat(fit.saturated)
# Fit the model with `lavaan`
fit.saturated <- lavaan(fit.saturated, data = data, auto.var = TRUE)
# Get regression parameters only and make it pretty with the `rempsyc::nice_table` integration
lavaan_reg(fit.saturated, nice_table = TRUE, highlight = TRUE)
(regression <- list(speed = "grade",
textual = IV))
# We check that we have removed "ageyr" correctly from "speed". OK.
# We can run the model again. However, we set `label = TRUE` to get the path names
model.path <- write_lavaan(mediation, regression, covariance, label = TRUE)
cat(model.path)
# We check that we have removed "ageyr" correctly from "speed" in the
# regression section. OK.
(indirect <- list(age_visual_speed = c("speed_a", "visual_a"),
grade_visual_textual = c("textual_a", "visual_b")))
# We run the model again, with the indirect effects
model.path <- write_lavaan(mediation, regression, covariance, indirect, label = TRUE)
cat(model.path)
# Fit the model with `lavaan`
fit.path <- lavaan(model.path, data = data, auto.var = TRUE)
# We can get the fit summary if necessary, but the output is a bit long
summary(fit.path)
# Get regression parameters only and make it pretty with the `rempsyc::nice_table` integration
lavaan_reg(fit.path, nice_table = TRUE, highlight = TRUE)
fit <- fit.path
lavaan::parameterEstimates(fit, standardized = TRUE)
x <- lavaan::parameterEstimates(fit, standardized = TRUE)
x <- x[which(x["op"] == ":="),]
x
x[c("lhs", "rhs", "std.all", "pvalue")]
x <- x[c("lhs", "rhs", "std.all", "pvalue")]
x
names(x) <- c("Indirect Effect", "Paths", "B", "p")
x
x
rempsyc::nice_table(x)
speed = paste0("x", 7:9)))
(latent <- list(visual = paste0("x", 1:3),
textual = paste0("x", 4:6),
speed = paste0("x", 7:9)))
(regression <- list(ageyr = c("visual", "textual", "speed"),
grade = c("visual", "textual", "speed")))
HS.model <- write_lavaan(latent = latent, regression = regression)
cat(HS.model)
HS.model <- write_lavaan(latent = latent, regression = regression, label = TRUE)
cat(HS.model)
m
IV
visual = c("ageyr", "grade")))
(mediation <- list(speed = "visual",
textual = "visual",
visual = c("ageyr", "grade")))
HS.model <- write_lavaan(mediation, regression, latent = latent)
cat(HS.model)
HS.model <- write_lavaan(mediation, regression, latent = latent, label = TRUE)
cat(HS.model)
(regression <- list(ageyr = c("visual", "textual", "speed"),
grade = c("visual", "textual", "speed")))
(mediation <- list(speed = "visual",
textual = "visual",
visual = c("ageyr", "grade")))
HS.model <- write_lavaan(mediation, regression, label = TRUE)
cat(HS.model)
(indirect <- list(age_visual_speed = c("speed_a", "visual_a"),
grade_visual_textual = c("textual_a", "visual_b")))
HS.model <- write_lavaan(mediation, regression, label = TRUE)
cat(HS.model)
HS.model <- write_lavaan(mediation, regression, indirect = indirect, label = TRUE)
cat(HS.model)
library(lavaan)
fit <- lavaan(HS.model, data=HolzingerSwineford1939,
auto.var=TRUE, auto.fix.first=TRUE,
auto.cov.lv.x=TRUE)
HS.model <- write_lavaan(mediation, regression, indirect = indirect,
latent = latent, label = TRUE)
cat(HS.model)
library(lavaan)
fit <- lavaan(HS.model, data=HolzingerSwineford1939,
auto.var=TRUE, auto.fix.first=TRUE,
auto.cov.lv.x=TRUE)
lavaan_ind(fit)
library(lavaan)
fit <- lavaan(HS.model, data=HolzingerSwineford1939,
auto.var=TRUE, auto.fix.first=TRUE,
auto.cov.lv.x=TRUE)
lavaan_ind(fit)
fit
lavaan_ind(fit)
devtools::load_all(".")
lavaan_ind(fit)
# Let's get the indirect effects only
lavaan_ind(fit)
parameterEstimates(fit.path, standardized = TRUE)[which(parameterEstimates(fit.path)$op == ":="),]
lavaan_ind(fit, nice_table = TRUE)
lavaan_ind(fit, nice_table = TRUE, highligth = TRUE)
lavaan_ind(fit, nice_table = TRUE, highlight = TRUE)
library(lavaanExtra)
library(lavaanExtra)
x <- lavaan::parameterEstimates(fit, standardized = TRUE)
x
x <- x[which(x["op"] == "~~"),]
x
mean(c(0.313,0.764))
x
x <- x[c("lhs", "rhs", "std.all", "pvalue")]
x
names(x) <- c("Variable 1", "Variable 2", "r", "p")
x
rempsyc::nice_table(x)
devtools::load_all(".")
# Get covariance indices
lavaan_cov(fit.path)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_cov(fit.path, nice_table = TRUE)
# Define our regression terms
(regression <- list(mpg = names(mtcars)[2:5],
disp = names(mtcars)[4:7]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Fit the model with `lavaan`
library(lavaan)
fit <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
# Get regression parameters only
lavaan_reg(fit)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_reg(fit, nice_table = TRUE, highlight = TRUE)
# Calculate scale averages
data <- HolzingerSwineford1939
data$visual <- rowMeans(data[paste0("x", 1:3)])
data$textual <- rowMeans(data[paste0("x", 4:6)])
data$speed <- rowMeans(data[paste0("x", 7:9)])
# Check what we have
head(data)
# Define our variables
(m <- "visual")
(IV <- c("ageyr", "grade"))
#(DV <- c("speed", "textual"))
# Define our lavaan lists
(mediation <- list(speed = m,
textual = m,
visual = IV))
(regression <- list(speed = IV,
textual = IV))
(covariance <- list(speed = "textual",
ageyr = "grade"))
# Write the model, and check it
fit.saturated <- write_lavaan(mediation, regression, covariance)
cat(fit.saturated)
# Fit the model with `lavaan`
fit.saturated <- lavaan(fit.saturated, data = data, auto.var = TRUE)
# Get regression parameters only and make it pretty with the `rempsyc::nice_table` integration
lavaan_reg(fit.saturated, nice_table = TRUE, highlight = TRUE)
(regression <- list(speed = "grade",
textual = IV))
# We check that we have removed "ageyr" correctly from "speed". OK.
# We can run the model again. However, we set `label = TRUE` to get the path names
model.path <- write_lavaan(mediation, regression, covariance, label = TRUE)
cat(model.path)
# We check that we have removed "ageyr" correctly from "speed" in the
# regression section. OK.
(indirect <- list(age_visual_speed = c("speed_a", "visual_a"),
grade_visual_textual = c("textual_a", "visual_b")))
# We run the model again, with the indirect effects
model.path <- write_lavaan(mediation, regression, covariance, indirect, label = TRUE)
cat(model.path)
# Fit the model with `lavaan`
fit.path <- lavaan(model.path, data = data, auto.var = TRUE)
# We can get the fit summary if necessary, but the output is a bit long
summary(fit.path)
# Get regression parameters only and make it pretty with the `rempsyc::nice_table` integration
lavaan_reg(fit.path, nice_table = TRUE, highlight = TRUE)
# Get covariance indices
lavaan_cov(fit.path)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_cov(fit.path, nice_table = TRUE)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_cov(fit.path, nice_table = TRUE, highligth = TRUE)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_cov(fit.path, nice_table = TRUE, highlight = TRUE)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_cov(fit.path, nice_table = TRUE)
# Get covariance indices
lavaan_cov(fit.path)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_cov(fit.path, nice_table = TRUE)
# Get fit indices
nice_fit(fit.saturated, fit.path)
# We can get it prettier with the `rempsyc::nice_table` integration
nice_fit(fit.saturated, fit.path, nice_table = TRUE)
# Let's get the indirect effects only
lavaan_ind(fit.path)
library(lavaanExtra)
?cfa
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
cat(HS.model)
(latent <- list(visual = paste0("x", 1:3),
textual = paste0("x", 4:6),
speed = paste0("x", 7:9)))
HS.model
(latent <- list(visual = paste0("x", 1:3),
textual = paste0("x", 4:6),
speed = paste0("x", 7:9)))
cat(latent)
(latent <- list(visual = paste0("x", 1:3),
textual = paste0("x", 4:6),
speed = paste0("x", 7:9)))
cat(latent)
cfa..model <- write_lavaan(latent = latent)
cat(cfa..model)
cat(HS.model)
fit.cfa <- cfa(HS.model, data = HolzingerSwineford1939)
summary(fit, fit.measures = TRUE)
summary(fit.cfa, fit.measures = TRUE)
# Fit the model with `lavaan`
library(lavaan)
fit.reg <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
# Get regression parameters only
lavaan_reg(fit.reg)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_reg(fit.reg, nice_table = TRUE, highlight = TRUE)
# Get the summary output
summary(fit.cfa, fit.measures = TRUE)
# Get fit indices
nice_fit(fit.cfa)
# We can get it prettier with the `rempsyc::nice_table` integration
nice_fit(fit.cfa, nice_table = TRUE)
# Get fit indices
nice_fit(fit.reg, fit.cfa)
# We can get it prettier with the `rempsyc::nice_table` integration
nice_fit(fit.reg, fit.cfa, nice_table = TRUE)
# Write the model, and check it
cfa.model <- write_lavaan(latent = latent)
cat(cfa.model)
# Fit the model with `lavaan`
fit.cfa <- cfa(cfa.model, data = HolzingerSwineford1939)
fit.cfa
# Get the summary output
summary(fit.cfa, fit.measures = TRUE)
# Get fit indices
nice_fit(fit.cfa)
# We can get it prettier with the `rempsyc::nice_table` integration
nice_fit(fit.cfa, nice_table = TRUE)
lavaan(model.latent, data = HolzingerSwineford1939, auto.var = TRUE)
model.latent <- write_lavaan(mediation, regression, covariance,
indirect, latent, label = TRUE)
cat(model.latent)
lavaan(model.latent, data = HolzingerSwineford1939, auto.var = TRUE)
lavaan(model.latent, data = HolzingerSwineford1939, auto.var = TRUE,
auto.fix.first = TRUE, auto.cov.lv.x = TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
section.1 <- "Regression example"
section.2 <- "CFA example"
section.3 <- "SEM example"
cute_cat <- function(x, header.level = 1){
cat(rep("#", header.level), " ", x, sep = "")
}
cute_TOC <- function(section) {
cat("[", section, "]",
"(#", tolower(gsub(" ", "-", gsub(",", "", section))), ")",
"<a name = '", section, "'/>",
"\n \n",
sep = "")
}
invisible(lapply(list(
section.1, section.2, section.3),
cute_TOC))
cute_cat("test")
cute_cat("test", 3)
library(lavaanExtra)
devtools::load_all(".")
# Define our regression terms
(regression <- list(mpg = names(mtcars)[2:5],
disp = names(mtcars)[4:7]))
# Load library, write the model, and check it
library(lavaanExtra)
mtcars.model <- write_lavaan(regression = regression)
cat(mtcars.model)
# Fit the model with `lavaan`
library(lavaan)
fit.reg <- lavaan(mtcars.model, data = mtcars, auto.var = TRUE)
# Get regression parameters only
lavaan_reg(fit.reg)
# We can get it prettier with the `rempsyc::nice_table` integration
lavaan_reg(fit.reg, nice_table = TRUE, highlight = TRUE)
# Define latent variables
(latent <- list(visual = paste0("x", 1:3),
textual = paste0("x", 4:6),
speed = paste0("x", 7:9)))
# Write the model, and check it
cfa.model <- write_lavaan(latent = latent)
cat(cfa.model)
# Fit the model with `lavaan`
fit.cfa <- cfa(cfa.model, data = HolzingerSwineford1939)
# Get the summary output
summary(fit.cfa, fit.measures = TRUE)
# Get fit indices
nice_fit(fit.cfa)
# We can get it prettier with the `rempsyc::nice_table` integration
nice_fit(fit.cfa, nice_table = TRUE)
pkgdown::build_site()
pkgdown::build_site()
library(lavaanExtra)
section.1 <- "Regression example"
section.2 <- "CFA example"
section.3 <- "SEM example"
section.3 <- "Saturated model"
cute_cat <- function(x, header.level = 1){
cat(rep("#", header.level), " ", x, sep = "")
}
cute_TOC <- function(section) {
cat("[", section, "]",
"(#", tolower(gsub(" ", "-", gsub(",", "", section))), ")",
"<a name = '", section, "'/>",
"\n \n",
sep = "")
}
invisible(lapply(list(
section.1, section.2, section.3),
cute_TOC))
pkgdown::build_site()
pkgdown::build_site()
devtools::load_all(".")
devtools::load_all(".")
library(lavaanExtra)
pkgdown::build_site()
pkgdown::build_site()
